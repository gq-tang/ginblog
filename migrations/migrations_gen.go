// Code generated by go-bindata.
// sources:
// ../migrations/001_create_album.sql
// ../migrations/002_create_article.sql
// ../migrations/003_create_comment.sql
// ../migrations/004_create_user.sql
// ../migrations/005_create_user_profile.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_create_albumSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4f\x8b\xd3\x50\x14\xc5\xf7\xf9\x14\x77\x97\x04\x33\x90\x28\x03\xe2\x90\x8d\xd6\xc5\x6c\xdc\xf8\x07\x77\xc3\x6b\x72\x5b\x1f\x93\xbc\x94\x97\xfb\xa6\x66\xa7\xc8\x38\x28\x33\x88\xa0\xce\x80\x9b\xea\x4a\x50\xac\xa8\xd4\x82\x82\x9f\x26\x49\xb3\xf2\x2b\x48\xf3\xa7\x49\x4b\x99\x6d\xee\xf9\xdd\x9c\x7b\xde\xd9\xd9\x81\x2b\x21\x1f\x4a\x46\x08\xf7\x47\x9a\x2f\xa3\x11\x10\xeb\x07\x08\x7c\x00\xf8\x98\xc7\x14\x03\x0b\xfa\x2a\xdc\xd3\x3c\x89\x4b\x55\x35\x2d\xbf\x19\x1a\x00\x00\xf7\x81\x0b\x32\x1c\xdb\x04\x11\x11\x08\x15\x04\xc0\x14\x45\x07\x5c\x78\x12\x43\x14\x64\x95\x3a\xe2\x14\x20\x88\x23\x26\xbd\x47\x4c\x1a\x57\x77\x77\x3b\x80\x8f\x03\xa6\x02\x02\x5d\x07\x2f\x0a\x97\x10\xe8\xd9\xbb\x93\xfc\xf3\x24\x9b\x9c\x14\x1f\x2f\xf4\x6a\xc7\x88\x7b\xa4\x24\xc2\xda\x92\x6d\x6c\x2d\xac\xb1\x43\x4c\xc6\x91\xf4\xe3\xb5\xbf\xdb\xdb\xc9\xf4\xf8\x47\xf1\xe6\xeb\x62\x7a\x56\xb3\xb1\x0a\x43\x26\x93\x0d\xe3\x2d\x59\xa9\xaa\x70\xda\x24\x9a\xb9\xdd\x59\xfc\xea\x75\x3a\x7f\x96\x9d\xcf\x8a\xf3\x9f\x35\x75\xc4\x71\x2c\x54\x78\x19\x55\x5c\x1c\x2f\xa6\xbf\xb3\x2f\x1f\xb2\xb7\xdf\x1a\x47\xc4\x48\xc5\x40\x5c\x24\x25\xd8\x72\x4e\xcb\xe5\x2f\x67\xd9\x93\xa7\x37\xc0\x5e\x9c\xbd\xc8\x3f\xfd\xfd\xf7\xe7\xd4\x49\x7f\x7d\xaf\x3c\x34\x61\x4a\x5e\x5e\x76\x88\x89\xc1\x7d\x73\x15\x15\xec\xdf\xe9\xdd\x7e\x78\x70\xef\xd6\x83\xbb\x60\x94\xaf\x66\xd5\xe7\x59\xb5\x61\xab\xb2\x60\x82\x8a\xb9\x18\x42\x9f\x24\xa2\x66\x02\x8a\x21\x17\xe8\xee\x0b\x11\xf5\x6e\x6e\x74\xc0\x75\xae\xad\x6c\x2e\x63\x8c\x91\x5c\x45\x83\xeb\x8d\x63\x57\xcf\xdf\xcf\xd3\xe7\xa7\xfa\x9e\xa6\x75\x4b\xd9\x8b\xc6\xa2\x5b\xcb\xaa\x8c\xff\x03\x00\x00\xff\xff\x74\xaa\x01\xcb\xb7\x02\x00\x00")

func _001_create_albumSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_create_albumSql,
		"001_create_album.sql",
	)
}

func _001_create_albumSql() (*asset, error) {
	bytes, err := _001_create_albumSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_create_album.sql", size: 695, mode: os.FileMode(436), modTime: time.Unix(1541991428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __002_create_articleSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4f\x6b\xd4\x50\x14\xc5\xf7\xf9\x14\x77\x97\x0c\x4e\x61\x46\x29\xa8\x65\x36\x3a\x2e\x0a\xe2\x42\xad\xb8\x2b\xaf\xc9\x9d\xe9\xa3\xc9\x7d\xc3\xcb\x7d\x9d\xce\xae\x22\xc3\xa0\x58\x44\xd0\xb6\x0b\x17\x55\x37\x82\x7f\x2a\x2a\x55\x50\xf1\xcb\x38\x99\xc9\xca\xaf\x20\x49\x5e\x9a\xb4\xd4\x6e\x93\xf3\xbb\xf7\xdc\xf3\xce\xc2\x02\x5c\x88\x64\x5f\x0b\x46\x58\x19\x38\x81\x56\x03\x60\xb1\x16\x22\xc8\x1e\xe0\x96\x8c\x39\x06\xa1\x59\xfa\x21\x2e\x39\xbe\xc6\x4c\x57\xfc\xb7\x5f\x3d\x07\x00\x40\x06\x20\x89\xbd\x76\xab\x01\xa4\x18\xc8\x84\x21\x08\xc3\x6a\x55\x92\xaf\x31\x42\xe2\x66\xae\x63\xc9\x21\x02\x6d\x0a\xed\xaf\x0b\xed\x5d\x5c\x5c\xac\x01\x01\xf6\x84\x09\x19\x5c\x17\x7c\x15\x65\x10\xb8\xc9\xee\x64\xf6\xee\x20\x39\x98\xa4\xaf\xf7\xdd\x62\x86\xd1\x12\x4e\x0c\x38\x8b\x5b\xb9\x7d\xd3\xca\x37\x70\x34\x54\x3a\x88\x4f\x6c\x6d\x9d\x4d\x4d\xc7\x5f\xd2\xe7\x1f\xe7\x87\x3b\x96\x8d\x4d\x14\x09\x3d\x3a\x65\xb8\x22\x0b\x95\xaf\x88\x33\x3c\x54\xd4\x67\xdc\xe2\xea\xa2\xea\x8c\x0f\x6f\x92\xdd\x89\xd5\x0b\xc3\xeb\x4a\xd7\x86\xfe\xc7\xcd\x9f\x5f\x2f\xe7\xdb\xe3\x72\x49\x9e\x7d\x15\x73\x09\xb4\x6a\xee\x9f\x3e\x9b\x7e\x7f\x98\xec\x1d\xa5\x7b\x5f\x2d\xb5\x29\x71\x48\x26\x3a\x8f\x4a\xf7\xc7\xf3\xc3\x1f\xc9\xfb\x57\xc9\x8b\x4f\xe5\xd9\x2c\xd8\xc4\xc0\x92\x46\x39\x58\x71\xed\x8a\x9b\x3d\x3e\x4a\xb6\x1f\x5c\x85\xd6\x7c\xe7\xd1\xec\xed\xef\xbf\x3f\x9f\xb4\xa7\xdf\x3e\x17\x1e\xec\x9c\x81\x96\x79\x7c\x1b\x38\xf2\x64\xd0\x38\x7e\x0f\x58\xbe\xd5\xbd\x71\x7f\xf5\xee\xf5\x7b\x77\xbc\xbc\x11\x4d\x7b\x5d\xd3\xfa\x6d\x16\x0e\x1a\x60\x62\x49\x7d\x58\x63\x8d\xe8\x34\x00\xa9\x2f\x09\x3b\xcb\x44\xaa\x7b\xed\x54\xbf\x3a\x97\xae\x1c\xbb\xcc\x52\x8d\x91\x3b\x86\x7b\x97\x4b\xc3\x1d\x5b\x25\x77\xc9\x71\xea\xa5\xef\xaa\x21\xd5\x6b\x5f\x96\xfd\x5f\x00\x00\x00\xff\xff\xeb\x7f\xd6\x12\x19\x03\x00\x00")

func _002_create_articleSqlBytes() ([]byte, error) {
	return bindataRead(
		__002_create_articleSql,
		"002_create_article.sql",
	)
}

func _002_create_articleSql() (*asset, error) {
	bytes, err := _002_create_articleSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "002_create_article.sql", size: 793, mode: os.FileMode(436), modTime: time.Unix(1541991449, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __003_create_commentSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd1\x31\x4e\xc3\x40\x10\x05\xd0\xde\xa7\x98\x2e\xb6\x20\x92\x8d\x14\x81\x14\xb9\x41\x69\x38\x00\x75\xb4\xac\xc7\x61\x14\x7b\xd6\x1a\xcf\x42\x7c\x07\x24\x1a\x6e\x40\x4d\x41\x97\x02\x8e\x13\x44\xc7\x15\x90\xb3\x31\x58\x90\xd6\xf3\xc6\xbb\x7f\xff\x74\x0a\x27\x35\xad\xc4\x28\xc2\x75\x13\x15\xe2\x1a\x50\x73\x53\x21\x50\x09\xb8\xa1\x56\x5b\xb0\xae\xae\x91\x75\x1e\x59\xc1\xde\x85\xf9\xe1\x6b\x1c\x01\x00\x50\x01\xc4\x1a\x67\x69\x02\xec\x14\xd8\x57\x15\x18\xaf\x6e\x49\x6c\x05\x7b\x77\xba\x77\x46\x94\x6c\x85\xcb\x91\x2f\xb0\x34\xbe\x0a\x3b\x01\x31\xd9\x35\x9b\x1a\x81\xef\x8c\xd8\x5b\x23\x71\x36\x3b\xe6\xbc\x10\x0c\xe2\x6c\x76\x94\x58\xc7\x8a\xac\xa0\xb8\x39\xdc\x20\x64\xf8\x7f\x7c\x1a\xc6\xad\x1a\xf5\x2d\x28\x71\xb7\x17\xbf\x20\x1b\x12\xc3\x24\xdd\xbd\x3e\x7e\x3e\xbd\x7f\xbd\x3d\x64\x1f\x2f\xcf\xbb\xed\x76\x12\x96\x1b\xa1\xda\x48\x07\x6b\xec\x62\x2a\x92\x28\x41\x5e\x11\x63\x7e\xc5\xec\x16\x97\x7f\x1e\x24\xcf\xce\x7f\xfe\xdd\x47\x68\x51\x73\xaf\xe5\xc5\x3c\x1a\x77\xb2\x70\xf7\x0c\xe3\x5a\x86\x32\xbe\x03\x00\x00\xff\xff\xb4\xbd\x8e\x78\xb9\x01\x00\x00")

func _003_create_commentSqlBytes() ([]byte, error) {
	return bindataRead(
		__003_create_commentSql,
		"003_create_comment.sql",
	)
}

func _003_create_commentSql() (*asset, error) {
	bytes, err := _003_create_commentSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "003_create_comment.sql", size: 441, mode: os.FileMode(436), modTime: time.Unix(1541991460, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __004_create_userSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xcb\x6e\xd3\x4e\x14\xc6\xf7\x7e\x8a\xa3\x28\x92\x13\x35\xd5\xdf\x76\x1b\x35\xfd\x47\x5e\xe4\x42\x6f\x09\x90\x44\x04\x9a\x55\x34\x38\x63\x67\x82\x3d\xe3\xcc\x8c\x13\xca\x8a\x6e\x2a\x84\x8a\x00\xa9\xa2\x5b\x24\x36\xdd\x20\x84\x40\xa5\x8b\xc2\xdb\xd8\x29\x2b\x5e\x01\x39\x89\xa9\x41\x95\xea\xa5\xe7\xfb\x7d\xe7\xf2\x9d\xd5\x55\x58\xf1\x88\xc3\x91\xc4\xd0\xf5\x95\x01\x67\x3e\x48\xf4\xd8\xc5\x40\x6c\xc0\x4f\x89\x90\x02\x02\x81\x79\x59\xb1\x38\x8e\x45\x8b\xc7\xf8\x57\x4e\x01\x00\x20\x03\x20\x54\xe6\x74\x2d\x0f\x94\x49\xa0\x81\xeb\x02\x0a\x24\xeb\x13\x6a\x71\xec\x61\x2a\x0b\x73\x9d\x3f\x64\x14\xc3\x04\x71\x6b\x88\x78\xce\x48\xcb\x07\xd8\x46\x81\x2b\x41\x55\xc1\x62\x5e\x8c\x80\x3a\x3b\x39\x8b\x5e\x7c\x0b\xdf\xbc\x52\x97\x38\x12\x62\xca\xf8\xe0\xda\xa1\x58\xbc\xc5\x22\xfc\x74\x34\x7b\x7f\xb8\xe4\xe3\x86\xfb\x3e\x67\x36\x71\x71\x3f\xd5\x73\x02\xc6\x2e\x0b\xe5\x62\xce\x9b\x15\xd7\xe6\xd1\x97\xb3\xf0\xe8\x38\x3a\x3d\xff\x79\xfa\x75\x59\xc2\x1a\x22\xea\xdc\x06\x82\x3a\xbb\x7c\x77\xf5\xe3\xed\x5f\xa4\x90\x48\x06\x62\x0e\xae\xdf\x30\x94\x9e\x5a\xcb\xcb\xf3\xe8\xf9\xe1\xff\xa0\x85\x9f\x5f\x5f\x9d\x7c\xff\x75\x79\xac\x47\x1f\x3f\x84\x17\x17\xc9\x9a\x38\xf1\x10\x3f\x80\x27\xf8\x20\x47\x06\x79\x25\x8f\xa9\x43\x28\x36\x77\x29\x65\xf5\xea\x3f\xc1\x98\xc6\x9f\x12\xf1\x4a\x05\x96\x66\x20\xed\x52\x52\xcd\x5c\x86\xa0\x96\x15\x85\x50\x81\xb9\x8c\x3b\x64\x8b\xec\xe7\x71\x16\x92\x54\xf2\xca\x04\xb9\x01\x16\xb9\x8c\x5e\x2c\x25\x5f\xa6\x90\x69\x55\x1b\xf5\x2d\x23\x2b\x86\xa8\xa8\x1b\x59\x5d\xd3\xb4\x6c\xb5\xe2\xe0\x4d\xb9\x5b\x1c\x8f\x3c\x9b\x0c\x51\xa0\xf7\x6a\xd5\x46\xc5\x34\xb3\xa3\xda\x7f\x1b\x7b\xcd\xee\xca\xb6\xd3\x44\xd3\xce\x76\xdd\xd8\xeb\x4e\x26\x0f\x19\xe9\x78\xed\x3b\x5c\x96\xda\x5d\xda\x69\xa2\xda\xb8\x7b\x6f\x6c\xf7\x1a\xa4\xe5\x6f\xb4\xf7\x5b\x5b\xda\x5d\x51\xe1\x5c\xac\xaf\x3d\xf0\xe8\x8e\x61\x3b\x9d\xfd\xe0\x51\xfd\xd9\x68\xad\xc7\xee\x5b\xda\x8e\xbd\x59\x31\xcd\x4c\xbe\xac\xa4\xaf\xbc\xce\xa6\x34\x7d\xe7\xf3\xeb\xfe\x1d\x00\x00\xff\xff\xdd\x04\xd8\xff\x07\x03\x00\x00")

func _004_create_userSqlBytes() ([]byte, error) {
	return bindataRead(
		__004_create_userSql,
		"004_create_user.sql",
	)
}

func _004_create_userSql() (*asset, error) {
	bytes, err := _004_create_userSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "004_create_user.sql", size: 775, mode: os.FileMode(436), modTime: time.Unix(1542002604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __005_create_user_profileSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4f\x8b\xd3\x40\x18\xc6\xef\xf9\x14\xef\x6d\x12\x9c\x96\xa4\x6b\x97\x4a\x29\x88\xec\x65\x3f\x80\xe7\xdd\x69\xf2\xb6\x1d\x9c\xcc\xd4\xc9\x64\xdb\x20\x82\xb0\x2c\x14\x44\x10\x76\xc1\x83\x5d\x3c\x55\xbc\x88\x16\x0f\x5d\x5d\x17\xbf\x4c\xd3\xac\xdf\x42\x32\x6d\x6d\xfc\x03\x62\x0f\x85\x49\x7e\xcf\x93\x27\xcf\x9b\xb7\x56\x83\x3b\x31\xef\x6b\x66\x10\x1e\x0e\x9d\x48\xab\x21\x18\xd6\x15\x08\xbc\x07\x38\xe6\x89\x49\x20\x4d\x50\x1f\x0d\xb5\xea\x71\x81\x6d\x27\xd4\x58\xc2\x6b\xa8\x7a\xcb\x75\x00\x00\x78\x04\x5c\x1a\x37\xf0\x3d\x90\xca\x80\x4c\x85\x00\x96\x1a\x75\xc4\x65\xa8\x31\x46\x69\xa8\xe5\x34\x32\x21\x59\x8c\x70\xc2\x74\x38\x60\xda\x0d\x9a\x1e\x44\xd8\x63\xa9\x58\xab\xd6\x58\x82\x63\x30\x5c\x66\xd6\x73\x07\x04\x10\xaa\xb8\x34\x03\x12\x40\x57\x65\xd4\x87\x3e\xd7\x82\xac\x45\x5d\xae\xcd\x00\xe4\xd6\xb9\x51\xcd\xb2\x75\x20\x64\x67\x51\x5c\xbc\x59\xbd\x9a\x6d\xc4\x18\x33\x2e\xa0\xaa\xfd\x33\xd5\x70\xa0\x64\x25\x79\xf0\x37\x86\x45\x91\xc6\x24\xa9\xc4\x68\x36\xff\x91\x23\x9f\x7e\xcc\x2f\x9f\x6d\x72\x0c\x54\xb7\x9b\xfd\x8f\xba\x98\xcc\xf3\xd9\xcd\x46\xcd\xa5\xd1\x0a\x0c\x8e\xcd\x0e\x58\x5e\x3f\x2f\xae\x5f\x6c\x80\xa1\xe6\x31\xd3\x19\x3c\xc2\xcc\xe5\x91\xe7\x78\x80\xb2\xcf\x25\x76\x0e\xa5\x54\x07\x0f\x7e\x9b\x59\xa7\xf1\xf3\x91\x65\x9a\x04\x4d\x27\x35\xbd\xd6\xd6\xbb\x43\x8a\x8b\x77\xab\xc9\xe2\xf6\xc3\xdb\xd5\xe9\x19\x69\x3b\x0e\x97\x09\x6a\x53\xc6\x50\x70\x5c\xfd\x4a\x8e\x5d\x1e\xd1\xed\xf0\x69\x82\x63\x6a\xa7\x45\x6d\xed\xd4\x16\x4b\x37\xd5\x51\x5b\x01\xb5\xaf\xe2\x39\x27\x4c\xa4\x98\x80\x1b\x50\x92\x7f\xfd\x92\x9f\xcf\x08\x05\x12\xd8\xbf\x7b\xad\xfd\x9a\xdf\xa8\xf9\x7b\xe5\xc9\xf4\x1f\x37\x7c\xff\xee\xfd\x60\x7f\xaf\x1e\xaa\xd8\x02\xcd\xd6\xf6\x57\x1e\x97\x57\xef\xf3\xd7\x37\xf5\xfc\xf3\xb7\xe5\xd5\xb4\xbe\x5a\xcc\xf3\xe9\xa7\xf2\xfa\xf7\xb3\x45\x31\x99\xdf\x9e\x5f\x16\x2f\x4f\x09\x75\xc8\x68\xc0\x05\x82\xd1\x29\x3e\xb1\x95\x1d\xc2\x88\x0b\x01\xa1\x8a\xb8\xec\x43\x9c\x81\xe0\x3d\x74\x9e\x12\xaf\xed\x54\xd7\xe8\x40\x8d\x64\x75\x91\x7e\x59\x9f\x1f\x01\x00\x00\xff\xff\xb8\x47\x86\x05\x70\x03\x00\x00")

func _005_create_user_profileSqlBytes() ([]byte, error) {
	return bindataRead(
		__005_create_user_profileSql,
		"005_create_user_profile.sql",
	)
}

func _005_create_user_profileSql() (*asset, error) {
	bytes, err := _005_create_user_profileSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "005_create_user_profile.sql", size: 880, mode: os.FileMode(436), modTime: time.Unix(1542002858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_create_album.sql":        _001_create_albumSql,
	"002_create_article.sql":      _002_create_articleSql,
	"003_create_comment.sql":      _003_create_commentSql,
	"004_create_user.sql":         _004_create_userSql,
	"005_create_user_profile.sql": _005_create_user_profileSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_create_album.sql":        &bintree{_001_create_albumSql, map[string]*bintree{}},
	"002_create_article.sql":      &bintree{_002_create_articleSql, map[string]*bintree{}},
	"003_create_comment.sql":      &bintree{_003_create_commentSql, map[string]*bintree{}},
	"004_create_user.sql":         &bintree{_004_create_userSql, map[string]*bintree{}},
	"005_create_user_profile.sql": &bintree{_005_create_user_profileSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
